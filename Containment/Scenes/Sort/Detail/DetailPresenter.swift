//
//  DetailPresenter.swift
//  Containment
//
//  Created by Raymond Law on 8/28/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailPresentationLogic
{
  func presentOrder(response: Detail.ShowOrder.Response)
}

class DetailPresenter: DetailPresentationLogic
{
  weak var viewController: DetailDisplayLogic?
  let dateFormatter: DateFormatter = {
    let dateFormatter = DateFormatter()
    dateFormatter.dateStyle = .short
    dateFormatter.timeStyle = .none
    return dateFormatter
  }()
  let currencyFormatter: NumberFormatter = {
    let currencyFormatter = NumberFormatter()
    currencyFormatter.numberStyle = .currency
    return currencyFormatter
  }()
  
  // MARK: Show order
  
  func presentOrder(response: Detail.ShowOrder.Response)
  {
    let viewModel = Detail.ShowOrder.ViewModel(order: format(response.order))
    viewController?.displayOrder(viewModel: viewModel)
  }
  
  private func format(_ order: Order?) -> Detail.ShowOrder.ViewModel.Order?
  {
    guard let order = order else {
      return nil
    }
    let date = dateFormatter.string(from: order.date)
    let total = currencyFormatter.string(from: NSNumber(floatLiteral: order.total))!
    return Detail.ShowOrder.ViewModel.Order(date: date, name: order.name, email: order.email, total: total)
  }
}
