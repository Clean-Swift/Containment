//
//  SortViewController.swift
//  Containment
//
//  Created by Raymond Law on 8/28/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SortDisplayLogic: class
{
  func displaySortedOrders(viewModel: Sort.SortOrders.ViewModel)
}

class SortViewController: UIViewController, SortDisplayLogic, ListViewControllerDelegate
{
  var interactor: SortBusinessLogic?
  var router: (NSObjectProtocol & SortRoutingLogic & SortDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SortInteractor()
    let presenter = SortPresenter()
    let router = SortRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupChildViewControllers()
  }
  
  override func viewDidAppear(_ animated: Bool)
  {
    super.viewDidAppear(animated)
    fetchOrders(by: Order.SortBy.date)
  }
  
  // MARK: Child view controllers
  
  var listViewController: ListViewController?
  var detailViewController: DetailViewController?
  
  func setupChildViewControllers()
  {
    for viewController in childViewControllers {
      if let viewController = viewController as? ListViewController {
        listViewController = viewController
        listViewController?.delegate = self
      } else if let viewController = viewController as? DetailViewController {
        detailViewController = viewController
      }
    }
  }
  
  // MARK: Sort orders
  
  @IBOutlet weak var segmentedControl: UISegmentedControl!
  
  @IBAction func segmentedControlValueChanged(_ sender: Any)
  {
    if let field = Order.SortBy(rawValue: segmentedControl.selectedSegmentIndex) {
      fetchOrders(by: field)
    } else {
      fetchOrders(by: Order.SortBy.date)
    }
  }
  
  // MARK: Sort orders
  
  func fetchOrders(by field: Order.SortBy)
  {
    listViewController?.fetchOrders(by: field)
//    let request = Sort.SortOrders.Request()
//    interactor?.sortOrders(request: request)
  }
  
  func displaySortedOrders(viewModel: Sort.SortOrders.ViewModel)
  {
  }
  
  // MARK: Show order
  
  func listViewController(_ listViewController: ListViewController, didSelectOrder order: Order)
  {
    detailViewController?.showOrder(order)
  }
}
