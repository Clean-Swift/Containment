//
//  ListInteractor.swift
//  Containment
//
//  Created by Raymond Law on 8/28/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListBusinessLogic
{
  func fetchOrders(request: List.FetchOrders.Request)
  func getOrder(request: List.GetOrder.Request)
}

protocol ListDataStore
{
}

class ListInteractor: ListBusinessLogic, ListDataStore
{
  var presenter: ListPresentationLogic?
  var worker: ListWorker?
  var orders: [Order] = [
    Order(date: Date(timeIntervalSinceNow: 100000), name: "Erich Gamma", email: "ErichGamma@example.com", total: 999.99),
    Order(date: Date(timeIntervalSinceNow: 400000), name: "Richard Helm", email: "RichardHelm@example.com", total: 499.99),
    Order(date: Date(timeIntervalSinceNow: 300000), name: "Ralph Johnson", email: "RalphJohnson@example.com", total: 1499.99),
    Order(date: Date(timeIntervalSinceNow: 200000), name: "John Vlissides", email: "JohnVlissides@example.com", total: 699.99)
  ]
  
  // MARK: Fetch orders
  
  func fetchOrders(request: List.FetchOrders.Request)
  {
    sortOrders(by: request.sortBy)
    let response = List.FetchOrders.Response(orders: orders)
    presenter?.presentFetchedOrders(response: response)
  }
  
  private func sortOrders(by field: Order.SortBy)
  {
    switch field {
    case .date:
      orders.sort(by: { (a, b) -> Bool in
        return a.date < b.date
      })
    case .price:
      orders.sort(by: { (a, b) -> Bool in
        return a.total < b.total
      })
    }
  }
  
  // MARK: Select order
  
  func getOrder(request: List.GetOrder.Request)
  {
    let order = orders[request.index]
    let response = List.GetOrder.Response(order: order)
    presenter?.presentOrder(response: response)
  }
}
