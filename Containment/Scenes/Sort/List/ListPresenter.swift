//
//  ListPresenter.swift
//  Containment
//
//  Created by Raymond Law on 8/28/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListPresentationLogic
{
  func presentFetchedOrders(response: List.FetchOrders.Response)
  func presentOrder(response: List.GetOrder.Response)
}

class ListPresenter: ListPresentationLogic
{
  weak var viewController: ListDisplayLogic?
  let dateFormatter: DateFormatter = {
    let dateFormatter = DateFormatter()
    dateFormatter.dateStyle = .short
    dateFormatter.timeStyle = .none
    return dateFormatter
  }()
  let currencyFormatter: NumberFormatter = {
    let currencyFormatter = NumberFormatter()
    currencyFormatter.numberStyle = .currency
    return currencyFormatter
  }()
  
  // MARK: Fetch orders
  
  func presentFetchedOrders(response: List.FetchOrders.Response)
  {
    let viewModel = List.FetchOrders.ViewModel(orders: format(response.orders))
    viewController?.displayFetchedOrders(viewModel: viewModel)
  }
  
  private func format(_ orders: [Order]) -> [List.FetchOrders.ViewModel.Order]
  {
    return orders.map { (order) -> List.FetchOrders.ViewModel.Order in
      let date = dateFormatter.string(from: order.date)
      let total = currencyFormatter.string(from: NSNumber(floatLiteral: order.total))!
      return List.FetchOrders.ViewModel.Order(date: date, total: total)
    }
  }
  
  // MARK: Select order
  
  func presentOrder(response: List.GetOrder.Response)
  {
    let viewModel = List.GetOrder.ViewModel(order: response.order)
    viewController?.displayOrder(viewModel: viewModel)
  }
}
