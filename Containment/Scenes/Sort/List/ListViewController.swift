//
//  ListViewController.swift
//  Containment
//
//  Created by Raymond Law on 8/28/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: class
{
  func displayFetchedOrders(viewModel: List.FetchOrders.ViewModel)
  func displayOrder(viewModel: List.GetOrder.ViewModel)
}

protocol ListViewControllerDelegate
{
  func listViewController(_ listViewController: ListViewController, didSelectOrder order: Order)
}

class ListViewController: UITableViewController, ListDisplayLogic
{
  var interactor: ListBusinessLogic?
  var router: (NSObjectProtocol & ListRoutingLogic & ListDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ListInteractor()
    let presenter = ListPresenter()
    let router = ListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
  }
  
  // MARK: Fetch orders
  
  var orders: [List.FetchOrders.ViewModel.Order] = []
  
  func fetchOrders(by field: Order.SortBy = Order.SortBy.date)
  {
    let request = List.FetchOrders.Request(sortBy: field)
    interactor?.fetchOrders(request: request)
  }
  
  func displayFetchedOrders(viewModel: List.FetchOrders.ViewModel)
  {
    orders = viewModel.orders
    tableView.reloadData()
    selectFirstRow()
  }
  
  func selectFirstRow()
  {
    let firstRow = IndexPath(row: 0, section: 0)
    tableView.selectRow(at: firstRow, animated: true, scrollPosition: .none)
    tableView(tableView, didSelectRowAt: firstRow)
  }
  
  override func numberOfSections(in tableView: UITableView) -> Int
  {
    return 1
  }
  
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  {
    return orders.count
  }
  
  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
  {
    let order = orders[indexPath.row]
    var cell = tableView.dequeueReusableCell(withIdentifier: "OrderCell")
    if cell == nil {
      cell = UITableViewCell(style: .value1, reuseIdentifier: "OrderCell")
    }
    cell?.textLabel?.text = order.date
    cell?.detailTextLabel?.text = order.total
    return cell!
  }
  
  // MARK: Select order
  
  var delegate: ListViewControllerDelegate?
  
  override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
  {
    getOrder(at: indexPath.row)
  }
  
  func getOrder(at index: Int)
  {
    let request = List.GetOrder.Request(index: index)
    interactor?.getOrder(request: request)
  }
  
  func displayOrder(viewModel: List.GetOrder.ViewModel)
  {
    delegate?.listViewController(self, didSelectOrder: viewModel.order)
  }
}
